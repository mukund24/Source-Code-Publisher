<!DOCTYPE>
<html>
  <head>
    <!-- 
     - Tokenizer.htm - Prototype for Project #2 results
     - ver 1.0 - 21 Aug 2011
     - CSE681 - Software Modeling and Analysis, Fall 2011
     - Jim Fawcett, Syracuse University
    -->

    <title>SOURCE CODE PUBLISHER </title>
    <link rel="stylesheet" href="css/publish.css?v=1.0" />
    <script type="text/javascript" src="js/jquery-1.6.2.min.js"></script>
    <script type="text/javascript" src="js/Publish.js"></script>
    <style type="text/css">
    </style>
  </head>
  <body>
    <button id="buttonbutton">Toggle button view</button>
    <button id="manpagebutton">Toggle Manual Page</button>
    <button id="classbutton">Toggle class content</button> 
    <button id="functionbutton">Toggle function content</button>
    <button id="netbutton">Toggle non-essential text view</button>
 
    <!-- page main content area -->
    <div id="content">
      <pre>
/////////////////////////////////////////////////////////////////////////
// Toker.cs  -  Tokenizer                                              //
//              Reads words and punctuation symbols from a file stream //
// ver 2.3                                                             //
// Language:    C#, Visual Studio 7.0, .Net Framework 1.0              //
// Platform:    Dell Dimension 8100, Windows 2000, SP 2                //
// Application: Pr#2 Help, CSE681, Fall 2003                           //
// Author:      Jim Fawcett, CST 2-187, Syracuse University            //
//              (315) 443-3948, jfawcett@twcny.rr.com                  //
/////////////////////////////////////////////////////////////////////////
<span class="manpage">
/*
 * Module Operations
 * =================
 * Toker provides, via the class CToker, the facilities to tokenize ASCII
 * text files.  That is, it composes the file&#39;s stream of characters into
 * words and punctuation symbols.
 * 
 * CToker works with a private buffer of characters from an attached file.
 * When the buffer is emptied CToker silently fills it again, so tokens
 * are always available until the end of file is reached.  End of file is
 * reported by tok = getTok() returning an empty token, e.g., tok == &quot;&quot;.  
 * 
 * Public Interface
 * ================
 * CToker toker = new CToker();       // constructs CToker object
 * if(toker.openFile(fileName)) ...   // attaches toker to specified file
 * if(toker.openString(str)) ...      // attaches toker to specified string
 * toker.close();                     // closes stream
 * string tok = toker.getTok();       // extracts next token from stream
 * string tok = toker.peekNextTok();  // peeks but does not extract
 * toker.pushBack(tok);               // puts token back on stream
 * 
 */
/*
 * Build Process
 * =============
 * Required Files:
 *   Toker.cs
 * 
 * Compiler Command:
 *   csc /target:exe /define:TEST_CTOKER CToker.cs
 * 
 * Maintenance History
 * ===================
 * ver 2.3 : 05 Sep 11
 *   - fixed bug collecting C Comments in eatCComment()
 * ver 2.2 : 10 Jun 08
 *   - added IsGrammarPunctuation to make tokenizer treat underscore
 *     as an ASCII char rather than a punctuator and used that in
 *     fillBuffer and eatASCII
 * ver 2.1 : 14 Jun 05
 *   - fixed newline handling bug in buffer filling routines:
 *     readLine, getLine, fillbuffer
 *   - fixed newline handling bug in extractComment
 * ver 2.0 : 30 May 05
 *   - added extraction of comments and quotes as tokens
 *   - added openString(...) to attach tokenizer to string
 * ver 1.1 : 21 Sep 04
 *   - added toker.close() in test stub
 *   - added processing for all command line args
 * ver 1.0 : 31 Aug 03
 *   - first release
 * 
 */
//
</span>
using System;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;

<span class="namespace">namespace CStoker
</span><span>{
  ///////////////////////////////////////////////////////////////////////
  // class CToker - tokenizer

<span class="class">  class CToker
</span><span>  {
    private TextReader ts = null;            // source of tokens
    private List&lt;string&gt; tokBuffer = null;   // intermediate token store
    private string lineRemainder;            // unprocessed line fragment

    //----&lt; constructor &gt;------------------------------------------------

<span class="function">    public CToker()
</span><span>    {
      tokBuffer = new List&lt;string&gt;();
    }
</span>    //----&lt; opens file stream for tokenizing &gt;---------------------------

<span class="function">    public bool openFile(string fileName)
</span><span>    {
      lineRemainder = &quot;&quot;;
      try
      {
        ts = new StreamReader(fileName);
      }
      catch(Exception)
      {
        return false;
      }
      return true;
    }
</span>    //----&lt; opens string for tokenizing &gt;------------------------------

<span class="function">    public bool openString(string source)
</span><span>    {
      lineRemainder = &quot;&quot;;
      try
      {
        ts = new StringReader(source);
      }
      catch(Exception)
      {
        return false;
      }
      return true;
    }
</span>    //----&lt; closes filestream &gt;------------------------------------------

<span class="function">    public void close()
</span><span>    {
      ts.Close();
    }
</span>    //
    //----&lt; read a single line, retaining newline character &gt;------------

<span class="function">    public string readLine()
</span><span>    {
      StringBuilder temp = new StringBuilder();
      while(true)
      {
        int i = ts.Read();
        if(i == -1)
        {
          return temp.ToString();
        }
        char ch = (char)i;
        temp.Append(ch);
        if(ch == &#39;\n&#39;)
          break;
      }
      return temp.ToString();
    }
</span>    //----&lt; extracts line of text for tokenizing &gt;-----------------------
    //
    //  Passes back a line to process for tokens with no comments
    //  as a side effect through the out string parameter.
    //  - if line has a leading comment or quote it is extracted and 
    //    saved in tokBuffer and remaining string is passed back
    //  - if line has a trailing comment or quote the line fragment
    //    at the front is passed back after saving the rest of the
    //    line for later processing
    //  - always passes back a line to process until end of file
    //  - returns true if end of file has not been reached
    //
<span class="function">    bool getLine(out string line)
</span><span>    {
      do
      {
        if(lineRemainder == &quot;&quot;)  // previously saved line fragment is empty
        {
          try
          {
            lineRemainder = readLine();

            if(lineRemainder == null || lineRemainder == &quot;&quot;)
            {
              line = &quot;&quot;;
              return false;     // end of file
            }
          }
          catch(Exception except)
          {
            line = except.Message.ToString();
            return false;       // error reading file
          }
        }
        line = extract(ref lineRemainder);
        
        // keep extracting until there is a line to tokenize
        // or tokBuffer has contents

      } while(line == &quot;&quot; &amp;&amp; tokBuffer.Count == 0);
      return true;
    }
</span>    //
    //----&lt; extract tokens and comments &gt;------------------------------
    //
    //  Extract the first of:
    //    C++ comments, C comments, double quotes, single quotes
    //
<span class="function">    string extract(ref string lineRemainder)
</span><span>    {
      char[] whiteChars = { &#39; &#39;, &#39;\t&#39;, &#39;\r&#39;, &#39;\f&#39; };  // newlines are tokens
      lineRemainder = lineRemainder.TrimStart(whiteChars);

      int posCppComm = lineRemainder.IndexOf(&quot;//&quot;);
      int posCComm   = lineRemainder.IndexOf(&quot;/*&quot;);
      int posDQuote  = lineRemainder.IndexOf(&#39;\&quot;&#39;);
      int posSQuote  = lineRemainder.IndexOf(&#39;\&#39;&#39;);

      // find first of the above

      int[] positions = { posCppComm, posCComm, posDQuote, posSQuote };
      for(int i=0; i&lt;positions.Length; ++i)
        if(positions[i] == -1)
          positions[i] = Int32.MaxValue;
      Array.Sort(positions);
      
      if(positions[0] == Int32.MaxValue)    // nothing to extract
      {
        string retStr = lineRemainder;
        lineRemainder = &quot;&quot;;
        return retStr;
      }
      if(posCppComm == positions[0])
        return extractComment(ref lineRemainder);
      if(posCComm == positions[0])
        return extractComment(ref lineRemainder);
      if(posDQuote == positions[0])
        return extractDQuote(ref lineRemainder);
      if(posSQuote == positions[0])
        return extractSQuote(ref lineRemainder);
      throw new Exception(&quot;extract failed&quot;);
    }
</span>    //
    //----&lt; extract double quote &gt;-------------------------------------

<span class="function">    string extractDQuote(ref string lineRemainder)
</span><span>    {
      string retStr;
      int pos = lineRemainder.IndexOf(&#39;\&quot;&#39;);
      if(pos == 0)
      {
        StringBuilder quote = new StringBuilder();
        quote.Append(&#39;\&quot;&#39;);
        for(int i=1; i&lt;lineRemainder.Length; ++i)
        {
          quote.Append(lineRemainder[i]);
          if(lineRemainder[i] == &#39;\&quot;&#39;)
          {
            if(lineRemainder[i-1] != &#39;\\&#39; || lineRemainder[i-2] == &#39;\\&#39;)
            {
              tokBuffer.Add(quote.ToString());
              lineRemainder = lineRemainder.Remove(0,i+1);
              return &quot;&quot;;
            }
          }
        }
      }
      else
      {
        retStr = lineRemainder.Remove(pos,lineRemainder.Length-pos);
        lineRemainder = lineRemainder.Remove(0,pos);
        return retStr;
      }
      throw new Exception(&quot;extractDQuote failed&quot;);
    }
</span>    //
    //----&lt; extract single quote &gt;-------------------------------------

<span class="function">    string extractSQuote(ref string lineRemainder)
</span><span>    {
      string retStr;
      int pos = lineRemainder.IndexOf(&#39;\&#39;&#39;);
      if(pos == 0)
      {
        StringBuilder quote = new StringBuilder();
        quote.Append(&#39;\&#39;&#39;);
        for(int i=1; i&lt;lineRemainder.Length; ++i)
        {
          quote.Append(lineRemainder[i]);
          if(lineRemainder[i] == &#39;\&#39;&#39;)
          {
            if(lineRemainder[i-1] != &#39;\\&#39; || lineRemainder[i-2] == &#39;\\&#39;)
            {
              tokBuffer.Add(quote.ToString());
              lineRemainder = lineRemainder.Remove(0,i+1);
              return &quot;&quot;;
            }
          }
        }
      }
      else
      {
        retStr = lineRemainder.Remove(pos,lineRemainder.Length-pos);
        lineRemainder = lineRemainder.Remove(0,pos);
        return retStr;
      }
      throw new Exception(&quot;extractSQuote failed&quot;);
    }
</span>    //
    //----&lt; extract comment &gt;------------------------------------------

<span class="function">    string extractComment(ref string lineRemainder)
</span><span>    {
      string line;
      int pos = lineRemainder.IndexOf(&quot;//&quot;);
      if(pos == 0)                          // whole line is C++ comment
      {
        if(lineRemainder[lineRemainder.Length-1] == &#39;\n&#39;)
        {
          lineRemainder = lineRemainder.Remove(lineRemainder.Length-1,1);
          tokBuffer.Add(lineRemainder);
          lineRemainder = &quot;&quot;;
          return &quot;\n&quot;;
        }
        else
        {
          tokBuffer.Add(lineRemainder);
          lineRemainder = &quot;&quot;;
        }
        return lineRemainder;
      }
      if(pos &gt; -1)                          // end of line is C++ comment
      {
        line = lineRemainder.Remove(pos,lineRemainder.Length-pos);
        lineRemainder = lineRemainder.Remove(0,pos);
        return line;
      }
      pos = lineRemainder.IndexOf(&quot;/*&quot;);    // line contains C comment
      if(pos &gt; -1)
      {
        if(pos == 0)
        {
          eatCComment();
          return &quot;&quot;;
        }
        else
        {
          string retStr = lineRemainder.Remove(pos,lineRemainder.Length-pos);
          lineRemainder = lineRemainder.Remove(0,pos);
          return retStr;
        }
      }
      // if we get here there is no comment in line

      line = lineRemainder;
      lineRemainder = &quot;&quot;;
      return line;
    }
</span>    //
    //----&lt; eat C comment - may consume more lines &gt;---------------------

<span class="function">    void eatCComment()
</span><span>    {
      List&lt;char&gt; comment = new List&lt;char&gt;();
      while(true)
      {
        int pos = lineRemainder.IndexOf(&quot;*/&quot;);
        for (int i = 0; i &lt; lineRemainder.Length; ++i)
        {
          if(pos != i)  // not at end of comment
            comment.Add(lineRemainder[i]);
          else
          { // end of comment
            comment.Add(lineRemainder[i]);
            comment.Add(lineRemainder[i + 1]);
            string temp = new string(comment.ToArray());
            tokBuffer.Add(temp);
            lineRemainder = lineRemainder.Remove(0,i+2);
            return;
          }
        }
        // end of lineRemainder
        lineRemainder = ts.ReadLine();  // ReadLine discards newline
        if(lineRemainder == null)
        {
          throw new Exception(&quot;encountered eof while processing comment&quot;);
        }
        lineRemainder = lineRemainder + &#39;\n&#39;;  // replace newline
      }
    }
</span>    //
    //----&lt; treat underscore as ASCII &gt;----------------------------------

<span class="function">    bool IsGrammarPunctuation(char ch)
</span><span>    {
      if (ch == &#39;_&#39;)
        return false;
      if (Char.IsPunctuation(ch))
        return true;
      return false;
    }
</span>    //----&lt; consumes ASCII characters from stream &gt;----------------------

<span class="function">    string eatAscii(ref string tok)
</span><span>    {
      string retStr = tok;
      for(int i=0; i&lt;tok.Length; ++i)
      {
        if(IsGrammarPunctuation(tok[i]) || Char.IsSymbol(tok[i]))
        {
          retStr = tok.Remove(i,tok.Length-i);
          tok = tok.Remove(0,i);
          return retStr;
        }
      }
      tok = &quot;&quot;;
      return retStr;
    }
</span>    //----&lt; consumes a single punctuator from stream &gt;-------------------

<span class="function">    string eatPunctuationChar(ref string tok)
</span><span>    {
      string retStr = tok.Remove(1,tok.Length-1);
      tok = tok.Remove(0,1);
      return retStr;
    }
</span>    //----&lt; fills internal buffer with tokens &gt;--------------------------

<span class="function">    bool fillBuffer()
</span><span>    {
      string line;
      if(!this.getLine(out line))
        return false;             // end of token source
      if(line == &quot;&quot;)
        return (tokBuffer.Count &gt; 0);
      char [] delim = { &#39; &#39;, &#39;\t&#39;, &#39;\f&#39;, &#39;\r&#39; };
      string [] toks = line.Split(delim);
      foreach(string tok in toks)
      {
        string temp = tok;
        while(temp.Length &gt; 0)
        {
          if(IsGrammarPunctuation(temp[0]) || Char.IsSymbol(temp[0]))
          {
            string punc = this.eatPunctuationChar(ref temp);
            tokBuffer.Add(punc);
          }
          else
          {
            string ascii = this.eatAscii(ref temp);
            tokBuffer.Add(ascii);
          }
        }
      }
      return true;
    }
</span>    //
    //----&lt; extracts tokens from internal buffer, filling if needed &gt;----

<span class="function">    public string getTok()
</span><span>    {
      string tok = peekNextTok();
      if(tok != &quot;&quot;)
        tokBuffer.RemoveAt(0);
      return tok;
    }
</span>    //----&lt; look at next token without extracting &gt;----------------------

<span class="function">    public string peekNextTok()
</span><span>    {
      if(tokBuffer.Count == 0)
        if(!fillBuffer())
          return &quot;&quot;;
      string tok = (string)tokBuffer[0];
      return tok;
    }
</span>    //----&lt; put token back into tokBuffer &gt;------------------------------

<span class="function">    public void pushBack(string tok)
</span><span>    {
      tokBuffer.Insert(0,tok);
    }
</span>
    //
    //----&lt; test stub &gt;--------------------------------------------------

#if(TEST_TOKER)

    [STAThread]
<span class="function">    static void Main(string[] args)
</span><span>    {
      Console.Write(&quot;\n  Testing CToker - Tokenizer &quot;);
      Console.Write(&quot;\n ============================\n&quot;);

      CToker toker = new CToker();

      if(args.Length == 0)
      {
        Console.Write(&quot;\n  Please enter name of file to tokenize\n\n&quot;);
        return;
      }
      foreach(string file in args)
      {
        string msg1;
        if(!toker.openFile(file))
        {
          msg1 = &quot;Can&#39;t open file &quot; + file;
          Console.Write(&quot;\n\n  {0}&quot;,msg1);
          Console.Write(&quot;\n  {0}&quot;,new string(&#39;-&#39;,msg1.Length));
        }
        else
        {
          msg1 = &quot;Processing file &quot; + file;
          Console.Write(&quot;\n\n  {0}&quot;,msg1);
          Console.Write(&quot;\n  {0}&quot;,new string(&#39;-&#39;,msg1.Length));
          string tok = &quot;&quot;;
          while((tok = toker.getTok()) != &quot;&quot;)
            if(tok != &quot;\n&quot;)
              Console.Write(&quot;\n{0}&quot;,tok);
          toker.close();
        }
      }
      Console.Write(&quot;\n&quot;);
      //
      string[] msgs = new string[10];
      msgs[0] = &quot;abc&quot;;
      msgs[1] = &quot;string with double quotes \&quot;first quote\&quot;&quot;
                + &quot; and \&quot;second quote\&quot; but no more&quot;;
      msgs[2] = &quot;string with single quotes \&#39;1\&#39; and \&#39;2\&#39;&quot;;
      msgs[3] = &quot;string with quotes \&quot;first quote\&quot; and \&#39;2\&#39;&quot;;
      msgs[4] = &quot;string with C comments /* first */ and /*second*/ but no more&quot;;
      msgs[5] = &quot;/* single C comment */&quot;;
      msgs[6] = &quot; -- /* another single comment */ --&quot;;
      msgs[7] = &quot;// a C++ comment\n&quot;;
      msgs[8] = &quot;// another C++ comment\n&quot;;
      msgs[9] = &quot;/*\n *\n *\n */&quot;;

      foreach(string msg in msgs)
      {
        if(!toker.openString(msg))
        {
          string msg2 = &quot;Can&#39;t open string for reading&quot;;
          Console.Write(&quot;\n\n  {0}&quot;,msg2);
          Console.Write(&quot;\n  {0}&quot;,new string(&#39;-&#39;,msg2.Length));
        }
        else
        {
          string msg2 = &quot;Processing \&quot;&quot; + msg + &quot;\&quot;&quot;;
          Console.Write(&quot;\n\n  {0}&quot;,msg2);
          Console.Write(&quot;\n  {0}&quot;,new string(&#39;-&#39;,msg2.Length));
          string tok = &quot;&quot;;
          while((tok = toker.getTok()) != &quot;&quot;)
          {
            if(tok != &quot;\n&quot;)
              Console.Write(&quot;\n{0}&quot;,tok);
            else
              Console.Write(&quot;\nnewline&quot;);
          }
          toker.close();
        }
      }
      Console.Write(&quot;\n\n&quot;);
    }
</span>#endif
  }
</span>}
</span>
      </pre>
    </div>
    <footer>
      <hr />

    </footer>
  </body>
</html>

